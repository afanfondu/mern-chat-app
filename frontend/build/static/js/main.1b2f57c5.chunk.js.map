{"version":3,"sources":["config/axios.js","store/useAuth.js","components/Authentication/Login.js","components/CloudinaryUploadWidget.js","components/Upload.js","components/Authentication/Signup.js","Pages/Homepage.js","config/ChatLogics.js","components/miscellaneous/ProfileModal.js","components/ScrollableChat.js","components/icons/SendIcon.js","Context/ChatProvider.js","components/userAvatar/UserBadgeItem.js","components/userAvatar/UserListItem.js","components/miscellaneous/UpdateGroupChatModal.js","components/SingleChat.js","components/Chatbox.js","components/ChatLoading.js","components/miscellaneous/GroupChatModal.js","components/miscellaneous/SideDrawer.js","components/MyChats.js","Pages/Chatpage.js","App.js","reportWebVitals.js","index.js"],"names":["axios","create","baseURL","process","headers","useAuth","persist","set","user","setUser","name","Login","_ref","loading","googleAuthLoading","show","setShow","useState","toast","useToast","email","setEmail","password","setPassword","setLoading","state","_jsxs","VStack","spacing","children","FormControl","isRequired","_jsx","FormLabel","Input","value","type","placeholder","onChange","e","target","InputGroup","size","InputRightElement","width","Button","h","onClick","handleClick","colorScheme","style","marginTop","async","title","status","duration","isClosable","position","data","post","error","description","response","message","isLoading","CloudinaryScriptContext","createContext","CloudinaryUploadWidget","uwConfig","setPic","loaded","setLoaded","useEffect","document","getElementById","script","createElement","setAttribute","src","addEventListener","body","appendChild","Provider","id","className","initializeCloudinaryWidget","myWidget","window","cloudinary","createUploadWidget","result","event","console","log","info","url","open","Upload","cloudName","uploadPreset","Signup","setName","confirmpassword","setConfirmpassword","pic","Avatar","marginRight","Homepage","Container","maxW","centerContent","Box","d","justifyContent","p","bg","w","m","borderRadius","borderWidth","Text","fontSize","fontFamily","Tabs","isFitted","variant","TabList","mb","Tab","TabPanels","TabPanel","GoogleLogin","onSuccess","credential","res","onError","useOneTap","isSameSenderMargin","messages","i","userId","length","sender","_id","isSameSender","undefined","isLastMessage","isSameUser","getSender","loggedUser","users","_users$","getSenderFull","ProfileModal","isOpen","onOpen","onClose","useDisclosure","_Fragment","IconButton","base","icon","ViewIcon","Modal","isCentered","ModalOverlay","ModalContent","ModalHeader","ModalCloseButton","ModalBody","flexDir","alignItems","md","ModalFooter","ScrollableChat","ScrollableFeed","map","display","Tooltip","label","placement","hasArrow","mt","mr","cursor","backgroundColor","concat","color","marginLeft","padding","maxWidth","content","SendIcon","props","Icon","height","viewBox","version","xmlns","stroke","strokeWidth","fill","fillRule","ChatContext","ChatState","useContext","ChatProvider","selectedChat","setSelectedChat","notification","setNotification","chats","setChats","UserBadgeItem","handleFunction","admin","Badge","px","py","CloseIcon","pl","UserListItem","_hover","background","UpdateGroupChatModal","fetchMessages","fetchAgain","setFetchAgain","groupChatName","setGroupChatName","search","setSearch","searchResult","setSearchResult","renameloading","setRenameLoading","handleAddUser","find","u","user1","groupAdmin","config","Authorization","token","put","chatId","handleRemove","chatName","flexWrap","pb","ml","query","get","handleSearch","Spinner","socket","selectedChatCompare","SingleChat","setMessages","newMessage","setNewMessage","socketConnected","setSocketConnected","typing","setTyping","istyping","setIsTyping","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","emit","sendMessage","io","on","newMessageRecieved","chat","includes","fontWeight","ArrowBackIcon","isGroupChat","toUpperCase","overflowY","alignSelf","margin","onKeyDown","key","Lottie","options","marginBottom","autoFocus","boxShadow","bgColor","lastTypingTime","Date","getTime","setTimeout","onSubmit","Chatbox","ChatLoading","Stack","Skeleton","GroupChatModal","selectedUsers","setSelectedUsers","handleDelete","delUser","filter","sel","slice","handleGroup","userToAdd","JSON","stringify","SideDrawer","loadingChat","setLoadingChat","accessChat","c","Drawer","DrawerOverlay","DrawerContent","DrawerHeader","borderBottomWidth","DrawerBody","MyChats","fetchChats","my","experimental_spaceX","Menu","MenuButton","as","NotificationBadge","count","effect","Effect","SCALE","BellIcon","MenuList","notif","MenuItem","n","rightIcon","ChevronDownIcon","MenuDivider","logoutHandler","googleLogout","AddIcon","AvatarGroup","max","mx","latestMessage","substring","Chatpage","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","GoogleOAuthProvider","clientId","ChakraProvider"],"mappings":"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","file":"static/js/main.1b2f57c5.chunk.js","sourcesContent":["import axios from \"axios\";\n\nexport default axios.create({\n  baseURL: process.env.REACT_APP_API_URL,\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n});\n","import { create } from \"zustand\";\nimport { persist } from \"zustand/middleware\";\n\nconst useAuth = create(\n  persist(\n    (set) => ({\n      user: null,\n      setUser: (user) => set({ user }),\n    }),\n    {\n      name: \"chat-app-user\",\n    },\n  ),\n);\n\nexport default useAuth;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport axios from \"../../config/axios\";\nimport { useToast } from \"@chakra-ui/react\";\nimport useAuth from \"../../store/useAuth\";\n\nconst Login = ({ loading: googleAuthLoading }) => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n  const [loading, setLoading] = useState(false);\n\n  const setUser = useAuth((state) => state.setUser);\n\n  const submitHandler = async () => {\n    setLoading(true);\n    if (!email || !password) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const { data } = await axios.post(\"/api/user/login\", { email, password });\n\n      toast({\n        title: \"Login Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setUser(data);\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n  };\n\n  return (\n    <VStack spacing=\"10px\">\n      <FormControl isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          value={email}\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter password\"\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={loading || googleAuthLoading}\n      >\n        Login\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Login;\n","import { createContext, useEffect, useState } from \"react\";\n\n// Create a context to manage the script loading state\nconst CloudinaryScriptContext = createContext();\n\nfunction CloudinaryUploadWidget({ uwConfig, setPic }) {\n  const [loaded, setLoaded] = useState(false);\n\n  useEffect(() => {\n    // Check if the script is already loaded\n    if (!loaded) {\n      const uwScript = document.getElementById(\"uw\");\n      if (!uwScript) {\n        // If not loaded, create and load the script\n        const script = document.createElement(\"script\");\n        script.setAttribute(\"async\", \"\");\n        script.setAttribute(\"id\", \"uw\");\n        script.src = \"https://upload-widget.cloudinary.com/global/all.js\";\n        script.addEventListener(\"load\", () => setLoaded(true));\n        document.body.appendChild(script);\n      } else {\n        // If already loaded, update the state\n        setLoaded(true);\n      }\n    }\n  }, [loaded]);\n\n  const initializeCloudinaryWidget = () => {\n    if (loaded) {\n      var myWidget = window.cloudinary.createUploadWidget(\n        uwConfig,\n        (error, result) => {\n          if (!error && result && result.event === \"success\") {\n            console.log(\"Done! Here is the image info: \", result.info);\n            setPic(result.info.url);\n          }\n        },\n      );\n\n      document.getElementById(\"upload_widget\").addEventListener(\n        \"click\",\n        function () {\n          myWidget.open();\n        },\n        false,\n      );\n    }\n  };\n\n  return (\n    <CloudinaryScriptContext.Provider value={{ loaded }}>\n      <button\n        id=\"upload_widget\"\n        className=\"cloudinary-button\"\n        onClick={initializeCloudinaryWidget}\n      >\n        Upload\n      </button>\n    </CloudinaryScriptContext.Provider>\n  );\n}\n\nexport default CloudinaryUploadWidget;\nexport { CloudinaryScriptContext };\n","import CloudinaryUploadWidget from \"./CloudinaryUploadWidget\";\nimport { useState } from \"react\";\n\nconst Upload = ({ setPic }) => {\n  const [uwConfig] = useState({\n    cloudName: process.env.REACT_APP_CLOUDINARY_CLOUD_NAME,\n    uploadPreset: process.env.REACT_APP_CLOUDINARY_UPLOAD_PRESET,\n    // cropping: true, //add a cropping step\n    // showAdvancedOptions: true,  //add advanced options (public_id and tag)\n    // sources: [ \"local\", \"url\"], // restrict the upload sources to URL and local files\n    // multiple: false,  //restrict upload to a single file\n    // folder: \"user_images\", //upload files to the specified folder\n    // tags: [\"users\", \"profile\"], //add the given tags to the uploaded files\n    // context: {alt: \"user_uploaded\"}, //add the given context data to the uploaded files\n    // clientAllowedFormats: [\"images\"], //restrict uploading to image files only\n    // maxImageFileSize: 2000000,  //restrict file size to less than 2MB\n    // maxImageWidth: 2000, //Scales the image down to a width of 2000 pixels before uploading\n    // theme: \"purple\", //change to a purple theme\n  });\n\n  // Create a Cloudinary instance and set your cloud name.\n  // const cld = new Cloudinary({\n  //   cloud: {\n  //     cloudName: process.env.REACT_APP_CLOUDINARY_CLOUD_NAME,\n  //   },\n  // });\n\n  // const myImage = cld.image(publicId);\n  return <CloudinaryUploadWidget uwConfig={uwConfig} setPic={setPic} />;\n};\n\nexport default Upload;\n","import { Button } from \"@chakra-ui/button\";\nimport { FormControl, FormLabel } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { VStack } from \"@chakra-ui/layout\";\nimport { Avatar } from \"@chakra-ui/react\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"../../config/axios\";\nimport { useState } from \"react\";\nimport Upload from \"../Upload\";\nimport useAuth from \"../../store/useAuth\";\n\nconst Signup = ({ loading: googleAuthLoading }) => {\n  const [show, setShow] = useState(false);\n  const handleClick = () => setShow(!show);\n  const toast = useToast();\n  const setUser = useAuth((state) => state.setUser);\n\n  const [name, setName] = useState();\n  const [email, setEmail] = useState();\n  const [confirmpassword, setConfirmpassword] = useState();\n  const [password, setPassword] = useState();\n  const [pic, setPic] = useState();\n  const [loading, setLoading] = useState(false);\n\n  const submitHandler = async () => {\n    setLoading(true);\n    if (!name || !email || !password || !confirmpassword) {\n      toast({\n        title: \"Please Fill all the Feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n      return;\n    }\n    if (password !== confirmpassword) {\n      toast({\n        title: \"Passwords Do Not Match\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n      return;\n    }\n    console.log(name, email, password, pic);\n    try {\n      const { data } = await axios.post(\"/api/user\", {\n        name,\n        email,\n        password,\n        pic,\n      });\n      setUser(data);\n      toast({\n        title: \"Registration Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n  };\n\n  return (\n    <VStack spacing=\"5px\">\n      <FormControl isRequired>\n        <FormLabel>Name</FormLabel>\n        <Input\n          placeholder=\"Enter Your Name\"\n          onChange={(e) => setName(e.target.value)}\n        />\n      </FormControl>\n      <FormControl isRequired>\n        <FormLabel>Email Address</FormLabel>\n        <Input\n          type=\"email\"\n          placeholder=\"Enter Your Email Address\"\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </FormControl>\n      <FormControl isRequired>\n        <FormLabel>Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Enter Password\"\n            onChange={(e) => setPassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"password\" isRequired>\n        <FormLabel>Confirm Password</FormLabel>\n        <InputGroup size=\"md\">\n          <Input\n            type={show ? \"text\" : \"password\"}\n            placeholder=\"Confirm password\"\n            onChange={(e) => setConfirmpassword(e.target.value)}\n          />\n          <InputRightElement width=\"4.5rem\">\n            <Button h=\"1.75rem\" size=\"sm\" onClick={handleClick}>\n              {show ? \"Hide\" : \"Show\"}\n            </Button>\n          </InputRightElement>\n        </InputGroup>\n      </FormControl>\n      <FormControl id=\"pic\">\n        <FormLabel>Upload your Pic</FormLabel>\n        <Avatar src={pic} style={{ marginRight: \"1rem\" }} />\n        <Upload setPic={setPic} />\n      </FormControl>\n      <Button\n        colorScheme=\"blue\"\n        width=\"100%\"\n        style={{ marginTop: 15 }}\n        onClick={submitHandler}\n        isLoading={loading || googleAuthLoading}\n      >\n        Sign Up\n      </Button>\n    </VStack>\n  );\n};\n\nexport default Signup;\n","import {\n  Box,\n  Container,\n  Tab,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Text,\n  useToast,\n} from \"@chakra-ui/react\";\nimport { GoogleLogin } from \"@react-oauth/google\";\nimport Login from \"../components/Authentication/Login\";\nimport Signup from \"../components/Authentication/Signup\";\nimport { useState } from \"react\";\nimport axios from \"../config/axios\";\nimport useAuth from \"../store/useAuth\";\n\nfunction Homepage() {\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n  const setUser = useAuth((state) => state.setUser);\n\n  const onSuccess = async (res) => {\n    setLoading(true);\n    try {\n      const { data } = await axios.post(\"/api/user/login/google\", {\n        credential: res.credential,\n      });\n\n      toast({\n        title: \"Login Successful\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setUser(data);\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n  };\n\n  return (\n    <Container maxW=\"xl\" centerContent>\n      <Box\n        d=\"flex\"\n        justifyContent=\"center\"\n        p={3}\n        bg=\"white\"\n        w=\"100%\"\n        m=\"40px 0 15px 0\"\n        borderRadius=\"lg\"\n        borderWidth=\"1px\"\n      >\n        <Text fontSize=\"4xl\" fontFamily=\"Work sans\">\n          Chat App\n        </Text>\n      </Box>\n      <Box bg=\"white\" w=\"100%\" p={4} borderRadius=\"lg\" borderWidth=\"1px\">\n        <Tabs isFitted variant=\"soft-rounded\">\n          <TabList mb=\"1em\">\n            <Tab>Login</Tab>\n            <Tab>Sign Up</Tab>\n          </TabList>\n          <TabPanels>\n            <TabPanel>\n              <Login loading={loading} />\n            </TabPanel>\n            <TabPanel>\n              <Signup loading={loading} />\n            </TabPanel>\n          </TabPanels>\n        </Tabs>\n        <GoogleLogin\n          onSuccess={onSuccess}\n          onError={() => {\n            toast({\n              title: \"Something went wrong!\",\n              status: \"error\",\n              duration: 5000,\n              isClosable: true,\n              position: \"bottom\",\n            });\n          }}\n          useOneTap\n        />\n      </Box>\n    </Container>\n  );\n}\n\nexport default Homepage;\n","export const isSameSenderMargin = (messages, m, i, userId) => {\n  // console.log(i === messages.length - 1);\n\n  if (\n    i < messages.length - 1 &&\n    messages[i + 1].sender._id === m.sender._id &&\n    messages[i].sender._id !== userId\n  )\n    return 33;\n  else if (\n    (i < messages.length - 1 &&\n      messages[i + 1].sender._id !== m.sender._id &&\n      messages[i].sender._id !== userId) ||\n    (i === messages.length - 1 && messages[i].sender._id !== userId)\n  )\n    return 0;\n  else return \"auto\";\n};\n\nexport const isSameSender = (messages, m, i, userId) => {\n  return (\n    i < messages.length - 1 &&\n    (messages[i + 1].sender._id !== m.sender._id ||\n      messages[i + 1].sender._id === undefined) &&\n    messages[i].sender._id !== userId\n  );\n};\n\nexport const isLastMessage = (messages, i, userId) => {\n  return (\n    i === messages.length - 1 &&\n    messages[messages.length - 1].sender._id !== userId &&\n    messages[messages.length - 1].sender._id\n  );\n};\n\nexport const isSameUser = (messages, m, i) => {\n  return i > 0 && messages[i - 1].sender._id === m.sender._id;\n};\n\nexport const getSender = (loggedUser, users) => {\n  return users[0]?._id === loggedUser?._id ? users[1].name : users[0].name;\n};\n\nexport const getSenderFull = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1] : users[0];\n};\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  IconButton,\n  Text,\n  Avatar,\n} from \"@chakra-ui/react\";\n\nconst ProfileModal = ({ user, children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      {children ? (\n        <span onClick={onOpen}>{children}</span>\n      ) : (\n        <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n      )}\n      <Modal size=\"lg\" onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent h=\"410px\">\n          <ModalHeader\n            fontSize=\"40px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {user.name}\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody\n            d=\"flex\"\n            flexDir=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n          >\n            <Avatar size=\"2xl\" src={user.pic} name={user.name} />\n            <Text\n              fontSize={{ base: \"28px\", md: \"30px\" }}\n              fontFamily=\"Work sans\"\n            >\n              Email: {user.email}\n            </Text>\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={onClose}>Close</Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default ProfileModal;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Tooltip } from \"@chakra-ui/tooltip\";\nimport ScrollableFeed from \"react-scrollable-feed\";\nimport {\n  isLastMessage,\n  isSameSender,\n  isSameSenderMargin,\n  isSameUser,\n} from \"../config/ChatLogics\";\nimport useAuth from \"../store/useAuth\";\n\nconst ScrollableChat = ({ messages }) => {\n  const user = useAuth((state) => state.user);\n\n  return (\n    <ScrollableFeed>\n      {messages &&\n        messages.map((m, i) => (\n          <div style={{ display: \"flex\" }} key={m._id}>\n            {(isSameSender(messages, m, i, user._id) ||\n              isLastMessage(messages, i, user._id)) && (\n              <Tooltip label={m.sender.name} placement=\"bottom-start\" hasArrow>\n                <Avatar\n                  mt=\"7px\"\n                  mr={1}\n                  size=\"sm\"\n                  cursor=\"pointer\"\n                  name={m.sender.name}\n                  src={m.sender.pic}\n                />\n              </Tooltip>\n            )}\n            <span\n              style={{\n                backgroundColor: `${\n                  m.sender._id === user._id ? \"white\" : \"#2055bf\"\n                }`,\n                color: `${m.sender._id === user._id ? \"black\" : \"white\"}`,\n                marginLeft: isSameSenderMargin(messages, m, i, user._id),\n                marginTop: isSameUser(messages, m, i, user._id) ? 3 : 10,\n                borderRadius: \"20px\",\n                padding: \"15px 20px\",\n                maxWidth: \"75%\",\n              }}\n            >\n              {m.content}\n            </span>\n          </div>\n        ))}\n    </ScrollableFeed>\n  );\n};\n\nexport default ScrollableChat;\n","import { Icon } from \"@chakra-ui/icons\";\n\nexport const SendIcon = (props) => (\n  <Icon {...props}>\n    <svg\n      style={{ color: \"currentcolor\" }}\n      width=\"28px\"\n      height=\"28px\"\n      viewBox=\"0 0 28 28\"\n      version=\"1.1\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <g stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\n        <g id=\"ic_fluent_send_28_filled\" fill=\"#2054bf\" fillRule=\"nonzero\">\n          <path\n            d=\"M3.78963301,2.77233335 L24.8609339,12.8499121 C25.4837277,13.1477699 25.7471402,13.8941055 25.4492823,14.5168992 C25.326107,14.7744476 25.1184823,14.9820723 24.8609339,15.1052476 L3.78963301,25.1828263 C3.16683929,25.4806842 2.42050372,25.2172716 2.12264586,24.5944779 C1.99321184,24.3238431 1.96542524,24.015685 2.04435886,23.7262618 L4.15190935,15.9983421 C4.204709,15.8047375 4.36814355,15.6614577 4.56699265,15.634447 L14.7775879,14.2474874 C14.8655834,14.2349166 14.938494,14.177091 14.9721837,14.0981464 L14.9897199,14.0353553 C15.0064567,13.9181981 14.9390703,13.8084248 14.8334007,13.7671556 L14.7775879,13.7525126 L4.57894108,12.3655968 C4.38011873,12.3385589 4.21671819,12.1952832 4.16392965,12.0016992 L2.04435886,4.22889788 C1.8627142,3.56286745 2.25538645,2.87569101 2.92141688,2.69404635 C3.21084015,2.61511273 3.51899823,2.64289932 3.78963301,2.77233335 Z\"\n            id=\"🎨-Color\"\n          ></path>\n        </g>\n      </g>\n    </svg>\n  </Icon>\n);\n","import React, { createContext, useContext, useState } from \"react\";\n\nconst ChatContext = createContext();\n\nconst ChatProvider = ({ children }) => {\n  const [selectedChat, setSelectedChat] = useState();\n  const [notification, setNotification] = useState([]);\n  const [chats, setChats] = useState(null);\n\n  return (\n    <ChatContext.Provider\n      value={{\n        selectedChat,\n        setSelectedChat,\n        notification,\n        setNotification,\n        chats,\n        setChats,\n      }}\n    >\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const ChatState = () => {\n  return useContext(ChatContext);\n};\n\nexport default ChatProvider;\n","import { CloseIcon } from \"@chakra-ui/icons\";\nimport { Badge } from \"@chakra-ui/layout\";\n\nconst UserBadgeItem = ({ user, handleFunction, admin }) => {\n  return (\n    <Badge\n      px={2}\n      py={1}\n      borderRadius=\"lg\"\n      m={1}\n      mb={2}\n      variant=\"solid\"\n      fontSize={12}\n      colorScheme=\"purple\"\n      cursor=\"pointer\"\n      onClick={handleFunction}\n    >\n      {user.name}\n      {admin === user._id && <span> (Admin)</span>}\n      <CloseIcon pl={1} />\n    </Badge>\n  );\n};\n\nexport default UserBadgeItem;\n","import { Avatar } from \"@chakra-ui/avatar\";\nimport { Box, Text } from \"@chakra-ui/layout\";\n\nconst UserListItem = ({ handleFunction, user }) => {\n  return (\n    <Box\n      onClick={handleFunction}\n      cursor=\"pointer\"\n      bg=\"#E8E8E8\"\n      _hover={{\n        background: \"#2055bf\",\n        color: \"white\",\n      }}\n      w=\"100%\"\n      d=\"flex\"\n      alignItems=\"center\"\n      color=\"black\"\n      px={3}\n      py={2}\n      mb={2}\n      borderRadius=\"lg\"\n    >\n      <Avatar\n        mr={2}\n        size=\"sm\"\n        cursor=\"pointer\"\n        name={user.name}\n        src={user.pic}\n      />\n      <Box>\n        <Text>{user.name}</Text>\n        <Text fontSize=\"xs\">\n          <b>Email : </b>\n          {user.email}\n        </Text>\n      </Box>\n    </Box>\n  );\n};\n\nexport default UserListItem;\n","import { ViewIcon } from \"@chakra-ui/icons\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n  IconButton,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport axios from \"../../config/axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport useAuth from \"../../store/useAuth\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst UpdateGroupChatModal = ({ fetchMessages, fetchAgain, setFetchAgain }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [renameloading, setRenameLoading] = useState(false);\n  const toast = useToast();\n\n  const { selectedChat, setSelectedChat } = ChatState();\n  const user = useAuth((state) => state.user);\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.get(`/api/user?search=${search}`, config);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n      setLoading(false);\n    }\n  };\n\n  const handleRename = async () => {\n    if (!groupChatName) return;\n\n    try {\n      setRenameLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/rename`,\n        {\n          chatId: selectedChat._id,\n          chatName: groupChatName,\n        },\n        config,\n      );\n\n      console.log(data._id);\n      // setSelectedChat(\"\");\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setRenameLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setRenameLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleAddUser = async (user1) => {\n    if (selectedChat.users.find((u) => u._id === user1._id)) {\n      toast({\n        title: \"User Already in group!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    if (selectedChat.groupAdmin._id !== user._id) {\n      toast({\n        title: \"Only admins can add someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupadd`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config,\n      );\n\n      setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  const handleRemove = async (user1) => {\n    if (selectedChat.groupAdmin._id !== user._id && user1._id !== user._id) {\n      toast({\n        title: \"Only admins can remove someone!\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const { data } = await axios.put(\n        `/api/chat/groupremove`,\n        {\n          chatId: selectedChat._id,\n          userId: user1._id,\n        },\n        config,\n      );\n\n      user1._id === user._id ? setSelectedChat() : setSelectedChat(data);\n      setFetchAgain(!fetchAgain);\n      fetchMessages();\n      setLoading(false);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n      setLoading(false);\n    }\n    setGroupChatName(\"\");\n  };\n\n  return (\n    <>\n      <IconButton d={{ base: \"flex\" }} icon={<ViewIcon />} onClick={onOpen} />\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            {selectedChat.chatName}\n          </ModalHeader>\n\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\" pb={3}>\n              {selectedChat.users.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  admin={selectedChat.groupAdmin}\n                  handleFunction={() => handleRemove(u)}\n                />\n              ))}\n            </Box>\n            <FormControl d=\"flex\">\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                value={groupChatName}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n              <Button\n                variant=\"solid\"\n                colorScheme=\"teal\"\n                ml={1}\n                isLoading={renameloading}\n                onClick={handleRename}\n              >\n                Update\n              </Button>\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add User to group\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n\n            {loading ? (\n              <Spinner size=\"lg\" />\n            ) : (\n              searchResult?.map((user) => (\n                <UserListItem\n                  key={user._id}\n                  user={user}\n                  handleFunction={() => handleAddUser(user)}\n                />\n              ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={() => handleRemove(user)} colorScheme=\"red\">\n              Leave Group\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default UpdateGroupChatModal;\n","import { FormControl } from \"@chakra-ui/form-control\";\nimport { Input, InputGroup, InputRightElement } from \"@chakra-ui/input\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport { IconButton, Spinner, useToast } from \"@chakra-ui/react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"../config/axios\";\nimport { ArrowBackIcon } from \"@chakra-ui/icons\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport ScrollableChat from \"./ScrollableChat\";\nimport Lottie from \"react-lottie\";\nimport animationData from \"../animations/typing.json\";\nimport { SendIcon } from \"./icons/SendIcon\";\n\nimport io from \"socket.io-client\";\nimport UpdateGroupChatModal from \"./miscellaneous/UpdateGroupChatModal\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport useAuth from \"../store/useAuth\";\nconst ENDPOINT = process.env.REACT_APP_API_URL; // \"https://talk-a-tive.herokuapp.com\"; -> After deployment\nvar socket, selectedChatCompare;\n\nconst SingleChat = ({ fetchAgain, setFetchAgain }) => {\n  const [messages, setMessages] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [socketConnected, setSocketConnected] = useState(false);\n  const [typing, setTyping] = useState(false);\n  const [istyping, setIsTyping] = useState(false);\n  const toast = useToast();\n\n  const defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: \"xMidYMid slice\",\n    },\n  };\n  const { selectedChat, setSelectedChat, notification, setNotification } =\n    ChatState();\n  const user = useAuth((state) => state.user);\n\n  const fetchMessages = async () => {\n    if (!selectedChat) return;\n    console.log(selectedChat);\n\n    try {\n      setLoading(true);\n\n      const { data } = await axios.get(`/api/message/${selectedChat._id}`, {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      });\n      setMessages(data);\n      setLoading(false);\n\n      socket.emit(\"join chat\", selectedChat._id);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Messages\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  const sendMessage = async () => {\n    socket.emit(\"stop typing\", selectedChat._id);\n    try {\n      setNewMessage(\"\");\n      const { data } = await axios.post(\n        \"/api/message\",\n        {\n          content: newMessage,\n          chatId: selectedChat,\n        },\n        { headers: { Authorization: `Bearer ${user.token}` } },\n      );\n      socket.emit(\"new message\", data);\n      setMessages([...messages, data]);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to send the Message\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n  const onKeyDown = (event) => {\n    if (event.key === \"Enter\" && newMessage) {\n      sendMessage();\n    }\n  };\n\n  const onSubmit = (event) => {\n    sendMessage();\n  };\n\n  useEffect(() => {\n    socket = io(ENDPOINT);\n    socket.emit(\"setup\", user);\n    socket.on(\"connected\", () => setSocketConnected(true));\n    socket.on(\"typing\", () => setIsTyping(true));\n    socket.on(\"stop typing\", () => setIsTyping(false));\n\n    // eslint-disable-next-line\n  }, []);\n\n  useEffect(() => {\n    fetchMessages();\n\n    selectedChatCompare = selectedChat;\n    // eslint-disable-next-line\n  }, [selectedChat]);\n\n  useEffect(() => {\n    socket.on(\"message recieved\", (newMessageRecieved) => {\n      if (\n        !selectedChatCompare || // if chat is not selected or doesn't match current chat\n        selectedChatCompare._id !== newMessageRecieved.chat._id\n      ) {\n        if (!notification.includes(newMessageRecieved)) {\n          setNotification([newMessageRecieved, ...notification]);\n          setFetchAgain(!fetchAgain);\n        }\n      } else {\n        setMessages([...messages, newMessageRecieved]);\n      }\n    });\n  });\n\n  const typingHandler = (e) => {\n    setNewMessage(e.target.value);\n\n    if (!socketConnected) return;\n\n    if (!typing) {\n      setTyping(true);\n      socket.emit(\"typing\", selectedChat._id);\n    }\n    let lastTypingTime = new Date().getTime();\n    var timerLength = 3000;\n    setTimeout(() => {\n      var timeNow = new Date().getTime();\n      var timeDiff = timeNow - lastTypingTime;\n      if (timeDiff >= timerLength && typing) {\n        socket.emit(\"stop typing\", selectedChat._id);\n        setTyping(false);\n      }\n    }, timerLength);\n  };\n\n  return (\n    <>\n      {selectedChat ? (\n        <>\n          <Text\n            fontSize={{ base: \"28px\", md: \"30px\" }}\n            p={4}\n            w=\"100%\"\n            fontFamily=\"Work sans\"\n            fontWeight=\"bold\"\n            d=\"flex\"\n            justifyContent={{ base: \"space-between\" }}\n            alignItems=\"center\"\n          >\n            <IconButton\n              d={{ base: \"flex\", md: \"none\" }}\n              icon={<ArrowBackIcon />}\n              onClick={() => setSelectedChat(\"\")}\n            />\n            {messages &&\n              (!selectedChat.isGroupChat ? (\n                <>\n                  {getSender(user, selectedChat.users)}\n                  <ProfileModal\n                    user={getSenderFull(user, selectedChat.users)}\n                  />\n                </>\n              ) : (\n                <>\n                  {selectedChat.chatName.toUpperCase()}\n                  <UpdateGroupChatModal\n                    fetchMessages={fetchMessages}\n                    fetchAgain={fetchAgain}\n                    setFetchAgain={setFetchAgain}\n                  />\n                </>\n              ))}\n          </Text>\n          <Box\n            d=\"flex\"\n            flexDir=\"column\"\n            justifyContent=\"flex-end\"\n            p={3}\n            // bg=\"#E8E8E8\"\n            bg=\"#f1f4fb\"\n            w=\"100%\"\n            h=\"100%\"\n            borderRadius=\"lg\"\n            overflowY=\"hidden\"\n          >\n            {loading ? (\n              <Spinner\n                size=\"xl\"\n                w={20}\n                h={20}\n                alignSelf=\"center\"\n                margin=\"auto\"\n              />\n            ) : (\n              <div className=\"messages\">\n                <ScrollableChat messages={messages} />\n              </div>\n            )}\n\n            <FormControl\n              onKeyDown={onKeyDown}\n              id=\"first-name\"\n              isRequired\n              mt={3}\n            >\n              {istyping ? (\n                <div>\n                  <Lottie\n                    options={defaultOptions}\n                    // height={50}\n                    width={70}\n                    style={{ marginBottom: 15, marginLeft: 0 }}\n                  />\n                </div>\n              ) : (\n                <></>\n              )}\n              <InputGroup>\n                <Input\n                  autoFocus\n                  boxShadow=\"rgba(0, 0, 0, 0.15) 0px 5px 15px 0px\"\n                  bgColor=\"white\"\n                  variant=\"filled\"\n                  bg=\"primary.faint\"\n                  placeholder=\"Type a message...\"\n                  borderRadius=\"3xl\"\n                  px=\"10\"\n                  height=\"16\"\n                  value={newMessage}\n                  onChange={typingHandler}\n                />\n                <InputRightElement>\n                  <IconButton\n                    bg=\"primary.faint\"\n                    color=\"primary.dark\"\n                    borderRadius=\"full\"\n                    mt=\"6\"\n                    mr=\"6\"\n                    size=\"lg\"\n                    aria-label=\"Send\"\n                    icon={<SendIcon />}\n                    onSubmit={onSubmit}\n                  />\n                </InputRightElement>\n              </InputGroup>\n            </FormControl>\n          </Box>\n        </>\n      ) : (\n        // to get socket.io on same page\n        <Box d=\"flex\" alignItems=\"center\" justifyContent=\"center\" h=\"100%\">\n          <Text fontSize=\"3xl\" pb={3} fontFamily=\"Work sans\">\n            Click on a user to start chatting\n          </Text>\n        </Box>\n      )}\n    </>\n  );\n};\n\nexport default SingleChat;\n","import { Box } from \"@chakra-ui/layout\";\nimport \"./styles.css\";\nimport SingleChat from \"./SingleChat\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nconst Chatbox = ({ fetchAgain, setFetchAgain }) => {\n  const { selectedChat } = ChatState();\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"flex\" : \"none\", md: \"flex\" }}\n      alignItems=\"center\"\n      flexDir=\"column\"\n      bg=\"white\"\n      w={{ base: \"100%\" }}\n    >\n      <SingleChat fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n    </Box>\n  );\n};\n\nexport default Chatbox;\n","import { Stack } from \"@chakra-ui/layout\";\nimport { Skeleton } from \"@chakra-ui/skeleton\";\n\nconst ChatLoading = () => {\n  return (\n    <Stack>\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n      <Skeleton height=\"45px\" />\n    </Stack>\n  );\n};\n\nexport default ChatLoading;\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n  useDisclosure,\n  FormControl,\n  Input,\n  useToast,\n  Box,\n} from \"@chakra-ui/react\";\nimport axios from \"../../config/axios\";\nimport { useState } from \"react\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport useAuth from \"../../store/useAuth\";\nimport UserBadgeItem from \"../userAvatar/UserBadgeItem\";\nimport UserListItem from \"../userAvatar/UserListItem\";\n\nconst GroupChatModal = ({ children }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [groupChatName, setGroupChatName] = useState();\n  const [selectedUsers, setSelectedUsers] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n\n  const { chats, setChats } = ChatState();\n  const user = useAuth((state) => state.user);\n\n  const handleGroup = (userToAdd) => {\n    if (selectedUsers.includes(userToAdd)) {\n      toast({\n        title: \"User already added\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    setSelectedUsers([...selectedUsers, userToAdd]);\n  };\n\n  const handleSearch = async (query) => {\n    setSearch(query);\n    if (!query) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      const { data } = await axios.get(`/api/user?search=${search}`, {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      });\n      console.log(data);\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const handleDelete = (delUser) => {\n    setSelectedUsers(selectedUsers.filter((sel) => sel._id !== delUser._id));\n  };\n\n  const handleSubmit = async () => {\n    if (!groupChatName || !selectedUsers) {\n      toast({\n        title: \"Please fill all the feilds\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top\",\n      });\n      return;\n    }\n\n    try {\n      const { data } = await axios.post(\n        `/api/chat/group`,\n        {\n          name: groupChatName,\n          users: JSON.stringify(selectedUsers.map((u) => u._id)),\n        },\n        {\n          headers: {\n            Authorization: `Bearer ${user.token}`,\n          },\n        },\n      );\n      setChats([data, ...chats]);\n      onClose();\n      toast({\n        title: \"New Group Chat Created!\",\n        status: \"success\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Failed to Create the Chat!\",\n        description: error.response.data,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  return (\n    <>\n      <span onClick={onOpen}>{children}</span>\n\n      <Modal onClose={onClose} isOpen={isOpen} isCentered>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader\n            fontSize=\"35px\"\n            fontFamily=\"Work sans\"\n            d=\"flex\"\n            justifyContent=\"center\"\n          >\n            Create Group Chat\n          </ModalHeader>\n          <ModalCloseButton />\n          <ModalBody d=\"flex\" flexDir=\"column\" alignItems=\"center\">\n            <FormControl>\n              <Input\n                placeholder=\"Chat Name\"\n                mb={3}\n                onChange={(e) => setGroupChatName(e.target.value)}\n              />\n            </FormControl>\n            <FormControl>\n              <Input\n                placeholder=\"Add Users eg: John, Piyush, Jane\"\n                mb={1}\n                onChange={(e) => handleSearch(e.target.value)}\n              />\n            </FormControl>\n            <Box w=\"100%\" d=\"flex\" flexWrap=\"wrap\">\n              {selectedUsers.map((u) => (\n                <UserBadgeItem\n                  key={u._id}\n                  user={u}\n                  handleFunction={() => handleDelete(u)}\n                />\n              ))}\n            </Box>\n            {loading ? (\n              // <ChatLoading />\n              <div>Loading...</div>\n            ) : (\n              searchResult\n                ?.slice(0, 4)\n                .map((user) => (\n                  <UserListItem\n                    key={user._id}\n                    user={user}\n                    handleFunction={() => handleGroup(user)}\n                  />\n                ))\n            )}\n          </ModalBody>\n          <ModalFooter>\n            <Button onClick={handleSubmit} colorScheme=\"blue\">\n              Create Chat\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\n\nexport default GroupChatModal;\n","import { Button } from \"@chakra-ui/button\";\nimport { Input } from \"@chakra-ui/input\";\nimport { Box } from \"@chakra-ui/layout\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport { useState } from \"react\";\nimport axios from \"../../config/axios\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport ChatLoading from \"../ChatLoading\";\nimport { Spinner } from \"@chakra-ui/spinner\";\nimport UserListItem from \"../userAvatar/UserListItem\";\nimport { ChatState } from \"../../Context/ChatProvider\";\nimport useAuth from \"../../store/useAuth\";\n\nfunction SideDrawer({ onClose, isOpen }) {\n  const [search, setSearch] = useState(\"\");\n  const [searchResult, setSearchResult] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [loadingChat, setLoadingChat] = useState(false);\n\n  const { setSelectedChat, chats, setChats } = ChatState();\n\n  const toast = useToast();\n  const user = useAuth((state) => state.user);\n\n  const handleSearch = async () => {\n    if (!search) {\n      toast({\n        title: \"Please Enter something in search\",\n        status: \"warning\",\n        duration: 5000,\n        isClosable: true,\n        position: \"top-left\",\n      });\n      return;\n    }\n\n    try {\n      setLoading(true);\n\n      const { data } = await axios.get(`/api/user?search=${search}`, {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      });\n\n      setLoading(false);\n      setSearchResult(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the Search Results\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  const accessChat = async (userId) => {\n    console.log(userId);\n\n    try {\n      setLoadingChat(true);\n      const { data } = await axios.post(\n        `/api/chat`,\n        { userId },\n        {\n          headers: {\n            Authorization: `Bearer ${user.token}`,\n          },\n        },\n      );\n\n      if (!chats.find((c) => c._id === data._id)) setChats([data, ...chats]);\n      setSelectedChat(data);\n      setLoadingChat(false);\n      onClose();\n    } catch (error) {\n      toast({\n        title: \"Error fetching the chat\",\n        description: error.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  return (\n    <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\n      <DrawerOverlay />\n      <DrawerContent>\n        <DrawerHeader borderBottomWidth=\"1px\">Search Users</DrawerHeader>\n        <DrawerBody>\n          <Box d=\"flex\" pb={2}>\n            <Input\n              placeholder=\"Search by name or email\"\n              mr={2}\n              value={search}\n              onChange={(e) => setSearch(e.target.value)}\n            />\n            <Button onClick={handleSearch}>Go</Button>\n          </Box>\n          {loading ? (\n            <ChatLoading />\n          ) : (\n            searchResult?.map((user) => (\n              <UserListItem\n                key={user._id}\n                user={user}\n                handleFunction={() => accessChat(user._id)}\n              />\n            ))\n          )}\n          {loadingChat && <Spinner ml=\"auto\" d=\"flex\" />}\n        </DrawerBody>\n      </DrawerContent>\n    </Drawer>\n  );\n}\n\nexport default SideDrawer;\n","import { AddIcon } from \"@chakra-ui/icons\";\nimport { googleLogout } from \"@react-oauth/google\";\nimport { Box, Stack, Text } from \"@chakra-ui/layout\";\nimport { useToast } from \"@chakra-ui/toast\";\nimport axios from \"../config/axios\";\nimport { useEffect } from \"react\";\nimport { getSender, getSenderFull } from \"../config/ChatLogics\";\nimport ChatLoading from \"./ChatLoading\";\nimport GroupChatModal from \"./miscellaneous/GroupChatModal\";\nimport { Button, useDisclosure } from \"@chakra-ui/react\";\nimport { ChatState } from \"../Context/ChatProvider\";\nimport useAuth from \"../store/useAuth\";\nimport { BellIcon, ChevronDownIcon } from \"@chakra-ui/icons\";\nimport { Avatar, AvatarGroup } from \"@chakra-ui/avatar\";\nimport ProfileModal from \"./miscellaneous/ProfileModal\";\nimport NotificationBadge from \"react-notification-badge\";\nimport { Effect } from \"react-notification-badge\";\nimport {\n  Menu,\n  MenuButton,\n  MenuDivider,\n  MenuItem,\n  MenuList,\n} from \"@chakra-ui/menu\";\nimport SideDrawer from \"./miscellaneous/SideDrawer\";\n\nconst MyChats = ({ fetchAgain }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const {\n    selectedChat,\n    setSelectedChat,\n    chats,\n    setChats,\n    notification,\n    setNotification,\n  } = ChatState();\n  const user = useAuth((state) => state.user);\n  const setUser = useAuth((state) => state.setUser);\n\n  const toast = useToast();\n\n  const logoutHandler = () => {\n    setUser(null);\n    googleLogout();\n  };\n\n  const fetchChats = async () => {\n    try {\n      const { data } = await axios.get(\"/api/chat\", {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      });\n      console.log(\"chats\", data);\n      setChats(data);\n    } catch (error) {\n      toast({\n        title: \"Error Occured!\",\n        description: \"Failed to Load the chats\",\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom-left\",\n      });\n    }\n  };\n\n  useEffect(() => {\n    fetchChats();\n    // eslint-disable-next-line\n  }, [fetchAgain]);\n\n  return (\n    <Box\n      d={{ base: selectedChat ? \"none\" : \"flex\", md: \"flex\" }}\n      flexDir=\"column\"\n      bg=\"white\"\n      w={{ base: \"100%\", md: \"md\" }}\n    >\n      <Box\n        d=\"flex\"\n        w=\"100%\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        my={6}\n        px={3}\n      >\n        <Box fontSize=\"2xl\" fontWeight=\"bold\" fontFamily=\"Work sans\">\n          <b>Chat App</b>\n        </Box>\n\n        <Box d=\"flex\" alignItems=\"center\" experimental_spaceX={2}>\n          <Menu>\n            <MenuButton as={Button} bg=\"white\">\n              <NotificationBadge\n                count={notification.length}\n                effect={Effect.SCALE}\n              />\n              <BellIcon fontSize=\"2xl\" />\n            </MenuButton>\n            <MenuList px={4}>\n              {!notification.length && \"No New Messages\"}\n              {notification.map((notif) => (\n                <MenuItem\n                  key={notif._id}\n                  onClick={() => {\n                    setSelectedChat(notif.chat);\n                    setNotification(notification.filter((n) => n !== notif));\n                  }}\n                >\n                  {notif.chat.isGroupChat\n                    ? `New Message in ${notif.chat.chatName}`\n                    : `New Message from ${getSender(user, notif.chat.users)}`}\n                </MenuItem>\n              ))}\n            </MenuList>\n          </Menu>\n          <Menu>\n            <MenuButton as={Button} bg=\"white\" rightIcon={<ChevronDownIcon />}>\n              <Avatar\n                size=\"sm\"\n                cursor=\"pointer\"\n                name={user.name}\n                src={user.pic}\n              />\n            </MenuButton>\n            <MenuList>\n              <ProfileModal user={user}>\n                <MenuItem>My Profile</MenuItem>{\" \"}\n              </ProfileModal>\n              <MenuDivider />\n              <MenuItem onClick={logoutHandler}>Logout</MenuItem>\n            </MenuList>\n          </Menu>\n        </Box>\n      </Box>\n\n      <Box w=\"full\" px={4} mb={4}>\n        <Button\n          variant=\"ghost\"\n          w=\"full\"\n          d=\"flex\"\n          mb={4}\n          alignItems=\"center\"\n          onClick={onOpen}\n          justifyContent=\"start\"\n          bg=\"#f1f4fb\"\n          borderRadius=\"full\"\n        >\n          <i className=\"fas fa-search\"></i>\n          <Text ml={3}>Search User</Text>\n        </Button>\n        <SideDrawer isOpen={isOpen} onClose={onClose} />\n        <GroupChatModal>\n          <Button fontSize=\"md\" p={4} rightIcon={<AddIcon />}>\n            New Group Chat\n          </Button>\n        </GroupChatModal>\n      </Box>\n      <Box\n        d=\"flex\"\n        flexDir=\"column\"\n        bg=\"#F8F8F8\"\n        w=\"100%\"\n        h=\"100%\"\n        p={2}\n        borderRadius=\"lg\"\n        overflowY=\"hidden\"\n      >\n        {chats ? (\n          <Stack overflowY=\"scroll\">\n            {chats.map((chat) => (\n              <Box\n                onClick={() => setSelectedChat(chat)}\n                cursor=\"pointer\"\n                bg={selectedChat === chat ? \"#2055bf\" : \"white\"}\n                color={selectedChat === chat ? \"white\" : \"black\"}\n                px={3}\n                py={2}\n                d=\"flex\"\n                alignItems=\"center\"\n                borderRadius=\"lg\"\n                key={chat._id}\n              >\n                {chat.isGroupChat ? (\n                  <AvatarGroup size=\"md\" mr={2} color=\"black\" max={1}>\n                    <Avatar\n                      name={chat.groupAdmin.name}\n                      src={chat.groupAdmin.pic}\n                    />\n                    {chats.map((user) =>\n                      chat.groupAdmin._id === user._id ? null : (\n                        <Avatar\n                          key={user._id}\n                          name={user.name}\n                          src={user.pic}\n                        />\n                      ),\n                    )}\n                  </AvatarGroup>\n                ) : (\n                  <Avatar\n                    mx={4}\n                    name={getSender(user, chat.users)}\n                    src={getSenderFull(user, chat.users).pic}\n                  />\n                )}\n                <Box>\n                  <Text>\n                    {!chat.isGroupChat\n                      ? getSender(user, chat.users)\n                      : chat.chatName}\n                  </Text>\n                  {chat.latestMessage && (\n                    <Text fontSize=\"xs\">\n                      <b>{chat.latestMessage.sender.name} : </b>\n                      {chat.latestMessage.content.length > 50\n                        ? chat.latestMessage.content.substring(0, 51) + \"...\"\n                        : chat.latestMessage.content}\n                    </Text>\n                  )}\n                </Box>\n              </Box>\n            ))}\n          </Stack>\n        ) : (\n          <ChatLoading />\n        )}\n      </Box>\n    </Box>\n  );\n};\n\nexport default MyChats;\n","import { Box } from \"@chakra-ui/layout\";\nimport { useState } from \"react\";\nimport Chatbox from \"../components/Chatbox\";\nimport MyChats from \"../components/MyChats\";\nimport useAuth from \"../store/useAuth\";\n\nconst Chatpage = () => {\n  const [fetchAgain, setFetchAgain] = useState(false);\n  const user = useAuth((state) => state.user);\n\n  return (\n    <div style={{ width: \"100%\", height: \"100vh\" }}>\n      <Box d=\"flex\" w=\"100%\" h=\"100%\">\n        {user && <MyChats fetchAgain={fetchAgain} />}\n        {user && (\n          <Chatbox fetchAgain={fetchAgain} setFetchAgain={setFetchAgain} />\n        )}\n      </Box>\n    </div>\n  );\n};\n\nexport default Chatpage;\n","import \"./App.css\";\nimport Homepage from \"./Pages/Homepage\";\nimport Chatpage from \"./Pages/Chatpage\";\nimport useAuth from \"./store/useAuth\";\n\nfunction App() {\n  const user = useAuth((state) => state.user);\n\n  return <div className=\"App\">{user ? <Chatpage /> : <Homepage />}</div>;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport ChatProvider from \"./Context/ChatProvider\";\nimport { GoogleOAuthProvider } from \"@react-oauth/google\";\n\nReactDOM.render(\n  <GoogleOAuthProvider clientId={process.env.REACT_APP_GOOGLE_CLIENT_ID}>\n    <ChakraProvider>\n      <ChatProvider>\n        <App />\n      </ChatProvider>\n    </ChakraProvider>\n  </GoogleOAuthProvider>,\n  document.getElementById(\"root\"),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}